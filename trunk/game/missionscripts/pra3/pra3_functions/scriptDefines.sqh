#define var(name) private #name; name
#define gvar(name) if (isNil "PRAA_gvars") then {PRAA_gvars = []}; if (isNil "PRAA_fncs") then {PRAA_fncs = []}; if (isNil "PRAA_pfncs") then {PRAA_pfncs = []}; var(_found) = false; {if (#name == (_x select 0)) exitWith {var(_text) = format ["GVar %1 previously declared at %2:%3 (by %4:%5)", #name, _x select 1, _x select 2, __FILE__, __LINE__]; hint _text; diag_log text _text; _found = true}} forEach (PRAA_gvars + PRAA_fncs + PRAA_pfncs); if (!_found) then {PRAA_gvars set [count PRAA_gvars, [#name, __FILE__, __LINE__]]}; name
#define fnc(name)  if (isNil "PRAA_gvars") then {PRAA_gvars = []}; if (isNil "PRAA_fncs") then {PRAA_fncs = []}; if (isNil "PRAA_pfncs") then {PRAA_pfncs = []}; var(_found) = false; {if (#name == (_x select 0)) exitWith {var(_text) = format ["GVar %1 previously declared at %2:%3 (by %4:%5)", #name, _x select 1, _x select 2, __FILE__, __LINE__]; hint _text; diag_log text _text; _found = true}} forEach (PRAA_gvars + PRAA_fncs + PRAA_pfncs); if (!_found) then {PRAA_fncs set  [count PRAA_fncs,  [#name, __FILE__, __LINE__]]}; name
#define pfnc(name) if (isNil "PRAA_gvars") then {PRAA_gvars = []}; if (isNil "PRAA_fncs") then {PRAA_fncs = []}; if (isNil "PRAA_pfncs") then {PRAA_pfncs = []}; var(_found) = false; {if (#name == (_x select 0)) exitWith {var(_text) = format ["GVar %1 previously declared at %2:%3 (by %4:%5)", #name, _x select 1, _x select 2, __FILE__, __LINE__]; hint _text; diag_log text _text; _found = true}} forEach (PRAA_gvars + PRAA_fncs + PRAA_pfncs); if (!_found) then {PRAA_pfncs set [count PRAA_pfncs, [#name, __FILE__, __LINE__]]}; name
